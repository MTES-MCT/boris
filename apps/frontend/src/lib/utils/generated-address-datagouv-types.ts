/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/getCapabilities': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Découvrir le service
     * @description Découvrir le service: les opérations possibles, les ressources disponibles et les options proposées.
     */
    get: operations['getCapabilities'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Recherche par géocodage direct */
    get: operations['search'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reverse': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Recherche par géocodage inverse */
    get: operations['reverse'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/search/csv': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Géocodage direct en masse d’un fichier CSV
     * @description Géocodage direct en masse d’un fichier CSV. Les paramètres de la requête permettent de spécifier les colonnes à utiliser pour le géocodage, les index à utiliser, les filtres à appliquer et les colonnes à conserver dans le fichier CSV de sortie.
     *
     *     Le fichier soumis doit faire une taille maximale de 50 Mo.
     *
     */
    post: operations['searchCsv'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reverse/csv': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Géocodage inversé en masse d’un fichier CSV
     * @description Géocodage inversé en masse d’un fichier CSV. Les paramètres de la requête permettent de spécifier les colonnes à utiliser pour le géocodage, les index à utiliser, les filtres à appliquer et les colonnes à conserver dans le fichier CSV de sortie.
     *
     *     Le fichier soumis doit faire une taille maximale de 50 Mo.
     *
     */
    post: operations['reverseCsv'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/async/projects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Créer un nouveau projet
     * @description Cette requête permet de créer le projet de géocodage. Elle peut être réalisée de façon anonyme ou avec un jeton Géoplateforme valide.
     *
     *     Si la requête est authentifiée avec l'en-tête Authorization alors il est possible de renseigner une communauté (Géoplateforme) de rattachement grâce à l'en-tête X-Community. Dans ce cas le projet hérite des quotas attribués à la communauté (taille max de fichier géocodage, niveau de parallélisation du géocodage). Par défaut un projet autorise un fichier de 50 Mo et ne propose pas de parallélisation (concurrency = 1).
     *
     *     Lorsque le projet est créé avec un utilisateur authentifié, ce dernier recevra la notification de succès ou d'échec sur la boîte courriel renseignée avec son compte.
     *
     *     À ce stade le projet est retourné avec un jeton qui doit être conservé pour les prochains appels du processus.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: {
          'X-Community'?: string;
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Projet créé avec succès */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Project'];
          };
        };
        /** @description Authentification incorrecte */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Code d'erreur (HTTP)
               * @example 401
               */
              code?: number;
              /**
               * @description Message d'erreur
               * @example Invalid token
               */
              message?: string;
            };
          };
        };
        /** @description Droits insuffisants */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Code d'erreur (HTTP)
               * @example 403
               */
              code?: number;
              /**
               * @description Message d'erreur
               * @example User is not a member of this community
               */
              message?: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/async/projects/{projectId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Récupérer les informations
     * @description Permet la récupération des informations d'un projet :
     *     - métadonnées
     *     - état et progression du géocodage
     *     - fichier source et fichier résultat (notamment le jeton d'accès)
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Identifiant unique du projet */
          projectId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Métadonnées du projet */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Project'];
          };
        };
        /** @description Non autorisé */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Projet introuvable */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    /**
     * Supprimer un projet
     * @description Permet la suppression d'un projet inactif (idle), terminé (completed) ou en erreur (failed).
     *
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Identifiant unique du projet */
          projectId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Projet supprimé avec succès */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Non autorisé */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Action interdite (le projet est en cours de traitement) */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Projet introuvable */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/async/projects/{projectId}/pipeline': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Définir les paramètres du traitement
     * @description Permet de définir les paramètres de géocodage mais aussi le format de sortie (CSV ou GeoJSON).
     *
     *     Dans le cas du CSV, les paramètres du fichier d'entrée sont conservés à l'exception de l'encodage qui sera toujours de l'UTF-8.
     *
     *     Attention : l'adéquation des paramètres de géocodage avec le fichier fourni n'est vérifiée qu'au moment du géocodage.
     *
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Identifiant unique du projet */
          projectId: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['Pipeline'];
        };
      };
      responses: {
        /** @description Pipeline défini avec succès */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Project'];
          };
        };
        /** @description Paramètres invalides */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Non autorisé */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Action interdite (le projet est en cours de traitement ou terminé) */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Projet introuvable */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/async/projects/{projectId}/input-file': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Uploader un fichier d'entrée pour un projet */
    put: {
      parameters: {
        query?: never;
        header?: {
          /** @description La taille du fichier peut être transmise pour s'assurer du transfert complet du fichier. */
          'Content-Length'?: number;
          /** @description Le nom du fichier à géocoder peut être transmis pour faciliter le suivi. Le fichier résultat reprendra en partie ce nom. Par défaut le fichier sera nommé input.csv.
           *      */
          'Content-Disposition'?: string;
        };
        path: {
          /** @description Identifiant unique du projet */
          projectId: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/octet-stream': string;
        };
      };
      responses: {
        /** @description Fichier d'entrée uploadé avec succès */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Project'];
          };
        };
        /** @description Fichier invalide (taille excessive ou incorrecte) */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Non autorisé */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Action interdite (le projet est en cours de traitement ou terminé) */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Projet introuvable */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/async/projects/{projectId}/start': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Démander le démarrage du géocodage
     * @description Permet de signifier à la plateforme que le géocodage est prêt à être effectué. Il faut au préalable que le fichier source ait été soumis, ainsi que les paramètres du traitement.
     *
     *     L'opération peut être annulée via la requête adéquate.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Identifiant unique du projet */
          projectId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Projet mis en attente de géocodage */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Project'];
          };
        };
        /** @description Non autorisé */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Action interdite (le projet est en cours de traitement ou terminé ou des éléments sont manquants) */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Projet introuvable */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/async/projects/{projectId}/abort': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Annuler un géocodage en attente ou en cours
     * @description Permet d'annuler un géocodage en attente (waiting) ou en cours (processing). Dans ce cas il retourne à l'état inactif et peut être modifié ou supprimé.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Identifiant unique du projet */
          projectId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Annulation prise en compte */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Project'];
          };
        };
        /** @description Non autorisé */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Action interdite (le projet n'est pas en cours ou en attente) */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Projet introuvable */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/async/projects/{projectId}/reset': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Ré-initialise un géocodage terminé ou en erreur
     * @description Permet de ré-initialiser un géocodage terminé (completed) ou en erreur (failed). Dans ce cas il retourne à l'état inactif et peut être modifié ou supprimé.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Identifiant unique du projet */
          projectId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Ré-initialisation prise en compte */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Project'];
          };
        };
        /** @description Non autorisé */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Action interdite (le projet n'est pas terminé ou en erreur) */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Projet introuvable */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/async/projects/{projectId}/input-file/{token}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Télécharger le fichier source du projet */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Identifiant unique du projet */
          projectId: string;
          /** @description Jeton de sécurité du fichier accessible dans les métadonnées du projet (inputFile.token) */
          token: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Fichier téléchargé avec succès */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/csv': components['schemas']['GeocodeCsvResponse'];
            'application/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/async/projects/{projectId}/output-file/{token}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Télécharger le fichier résultat du projet */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Identifiant unique du projet */
          projectId: string;
          /** @description Jeton de sécurité du fichier accessible dans les métadonnées du projet (outputFile.token) */
          token: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Fichier téléchargé avec succès */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/octet-stream': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Getcapabilities: {
      info?: {
        name?: string;
        url?: string;
        description?: string;
      };
      api?: {
        /** @example rest */
        name?: string;
        /** @example 0.0.0 */
        version?: string;
      };
      operations?: {
        id?: string;
        description?: string;
        url?: string;
        methods?: ('GET' | 'POST' | 'PUT' | 'DELETE')[];
        parameters?: {
          name?: string;
          in?: string;
          description?: string;
          required?: boolean;
          /** @description default value */
          default?: unknown;
          schema?: {
            type?: string;
            example?: string;
          };
          example?: string;
        }[];
      }[];
      indexes?: {
        id?: string;
        description?: string;
        fields?: {
          name?: string;
          description?: string;
          type?: string;
          queryable?: boolean;
          filter?: boolean;
          values?: unknown[];
        }[];
      }[];
    };
    GeocodeResponse:
      | components['schemas']['Address']
      | components['schemas']['Poi']
      | components['schemas']['Parcel'];
    GeocodeReverseResponse:
      | components['schemas']['AddressReverse']
      | components['schemas']['PoiReverse']
      | components['schemas']['ParcelReverse'];
    Parcel: {
      /** @example Feature */
      type?: string;
      properties?: components['schemas']['ParcelProperties'];
      geometry?: components['schemas']['GeometryPoint'];
    };
    /** @example {
     *       "id": "75056104AV0133",
     *       "departmentcode": "75",
     *       "municipalitycode": "056",
     *       "city": "Paris",
     *       "oldmunicipalitycode": "000",
     *       "districtcode": "104",
     *       "section": "AV",
     *       "number": "133",
     *       "sheet": 1,
     *       "truegeometry": {
     *         "type": "Polygon",
     *         "coordinates": [
     *           [
     *             [
     *               2.35457222187139,
     *               48.8523027661354
     *             ],
     *             [
     *               2.35463049659443,
     *               48.8523731401755
     *             ],
     *             [
     *               2.35465580843827,
     *               48.8523650925735
     *             ],
     *             [
     *               2.35464724014948,
     *               48.8522756505323
     *             ],
     *             [
     *               2.35457222187139,
     *               48.8523027661354
     *             ]
     *           ]
     *         ]
     *       },
     *       "_score": 1,
     *       "_type": "parcel"
     *     } */
    ParcelProperties: {
      /** @description Identifiant de la parcelle */
      id?: string;
      /** @description Code du département */
      departmentcode?: string;
      /** @description Code de la commune */
      municipalitycode?: string;
      /** @description Nom de la commune */
      city?: string;
      /** @description Code de l'ancienne commune */
      oldmunicipalitycode?: string;
      /** @description Code insee de l'arrondissement */
      districtcode?: string;
      /** @description Section cadastrale */
      section?: string;
      /** @description Numéro cadastral */
      number?: string;
      /** @description Feuille cadastrale */
      sheet?: string;
      truegeometry?: components['schemas']['GeometryPolygon'];
      _score?: number;
      /** @enum {string} */
      _type?: 'parcel';
    };
    ParcelReverse: {
      /** @example Feature */
      type?: string;
      properties?: components['schemas']['ParcelReverseProperties'];
      geometry?: components['schemas']['GeometryPoint'];
    };
    /** @example {
     *       "id": "75056104AV0133",
     *       "departmentcode": "75",
     *       "municipalitycode": "056",
     *       "city": "Paris",
     *       "oldmunicipalitycode": "000",
     *       "districtcode": "104",
     *       "section": "AV",
     *       "number": "133",
     *       "sheet": 1,
     *       "truegeometry": {
     *         "type": "Polygon",
     *         "coordinates": [
     *           [
     *             [
     *               2.35457222187139,
     *               48.8523027661354
     *             ],
     *             [
     *               2.35463049659443,
     *               48.8523731401755
     *             ],
     *             [
     *               2.35465580843827,
     *               48.8523650925735
     *             ],
     *             [
     *               2.35464724014948,
     *               48.8522756505323
     *             ],
     *             [
     *               2.35457222187139,
     *               48.8523027661354
     *             ]
     *           ]
     *         ]
     *       },
     *       "_score": 1,
     *       "_type": "parcel",
     *       "distance": 100
     *     } */
    ParcelReverseProperties: {
      /** @description Identifiant de la parcelle */
      id?: string;
      /** @description Code du département */
      departmentcode?: string;
      /** @description Code de la commune */
      municipalitycode?: string;
      /** @description Nom de la commune */
      city?: string;
      /** @description Code de l'ancienne commune */
      oldmunicipalitycode?: string;
      /** @description Code insee de l'arrondissement */
      districtcode?: string;
      /** @description Section cadastrale */
      section?: string;
      /** @description Numéro cadastral */
      number?: string;
      /** @description Feuille cadastrale */
      sheet?: string;
      truegeometry?: components['schemas']['GeometryPolygon'];
      _score?: number;
      /** @enum {string} */
      _type?: 'parcel';
      distance?: number;
    };
    Address: {
      /** @example Feature */
      type?: string;
      properties?: components['schemas']['AddressProperties'];
      geometry?: components['schemas']['GeometryPoint'];
    };
    /** @example {
     *       "label": "10 Rue Nationale 75013 Paris 13e Arrondissement",
     *       "id": "test-id",
     *       "postcode": "75013",
     *       "city": "Paris",
     *       "district": "Paris 13e Arrondissement",
     *       "street": "Rue Nationale",
     *       "housenumber": "10",
     *       "citycode": "75113",
     *       "x": 2.369063,
     *       "y": 48.822409,
     *       "score": 0.6515151515151515,
     *       "_score": 0.6515151515151515,
     *       "name": "10 Rue Nationale",
     *       "type": "housenumber",
     *       "_type": "address",
     *       "contexte": "75, Paris",
     *       "importance": "0.6"
     *     } */
    AddressProperties: {
      /** @description Libellé complet de l'adresse */
      label?: string;
      id?: string;
      postcode?: components['schemas']['PostalCode'];
      /** @description Commune de l'adresse */
      city?: string;
      /** @description Arrondissement de l'adresse */
      district?: string;
      /** @description Rue de l'adresse */
      street?: string;
      housenumber?: string;
      citycode?: components['schemas']['InseeCode'];
      /** @description Longitude de l'adresse */
      x?: number;
      /** @description Latitude de l'adresse */
      y?: number;
      score?: number;
      _score?: number;
      name?: string;
      /** @enum {string} */
      type?: 'housenumber' | 'street' | 'locality' | 'municipality';
      /**
       * @description Rétro-compatibilité
       * @enum {string}
       */
      _type?: 'address';
      context?: string;
      importance?: number;
    };
    AddressReverse: {
      /** @example Feature */
      type?: string;
      properties?: components['schemas']['AddressReverseProperties'];
      geometry?: components['schemas']['GeometryPoint'];
    };
    /** @example {
     *       "label": "10 Rue Nationale 75013 Paris 13e Arrondissement",
     *       "id": "test-id",
     *       "postcode": "75013",
     *       "city": "Paris",
     *       "district": "Paris 13e Arrondissement",
     *       "street": "Rue Nationale",
     *       "housenumber": "10",
     *       "citycode": "75113",
     *       "x": 2.369063,
     *       "y": 48.822409,
     *       "score": 0.6515151515151515,
     *       "_score": 0.6515151515151515,
     *       "name": "10 Rue Nationale",
     *       "type": "housenumber",
     *       "_type": "address",
     *       "contexte": "75, Paris",
     *       "importance": "0.6",
     *       "distance": 100
     *     } */
    AddressReverseProperties: {
      /** @description Libellé complet de l'adresse */
      label?: string;
      id?: string;
      postcode?: components['schemas']['PostalCode'];
      /** @description Commune de l'adresse */
      city?: string;
      /** @description Arrondissement de l'adresse */
      district?: string;
      /** @description Rue de l'adresse */
      street?: string;
      housenumber?: string;
      citycode?: components['schemas']['InseeCode'];
      /** @description Longitude de l'adresse */
      x?: number;
      /** @description Latitude de l'adresse */
      y?: number;
      score?: number;
      _score?: number;
      name?: string;
      /** @enum {string} */
      type?: 'housenumber' | 'street' | 'locality' | 'municipality';
      /**
       * @description Rétro-compatibilité
       * @enum {string}
       */
      _type?: 'address';
      context?: string;
      importance?: number;
      distance?: number;
    };
    Poi: {
      /** @example Feature */
      type?: string;
      properties?: components['schemas']['PoiProperties'];
      geometry?: components['schemas']['GeometryPoint'];
    };
    /** @example {
     *       "toponym": "Pont National",
     *       "postcode": [
     *         77310,
     *         91100
     *       ],
     *       "citycode": [
     *         77,
     *         77300,
     *         91,
     *         91450
     *       ],
     *       "city": [
     *         "Saint-Fargeau-Ponthierry",
     *         "Corbeil-Essonnes"
     *       ],
     *       "category": [
     *         "construction linéaire"
     *       ],
     *       "extrafields": {
     *         "names": [
     *           "pont strasbourg",
     *           "pont national"
     *         ],
     *         "cleabs": "CONSLINE0000000060494180"
     *       },
     *       "truegeometry": {
     *         "coordinates": [
     *           [
     *             2.03666899913969,
     *             44.3490469250535,
     *             257
     *           ],
     *           [
     *             2.03646952056093,
     *             44.3492684335352,
     *             256.3
     *           ],
     *           [
     *             2.03644906780383,
     *             44.3492907599887,
     *             256.3
     *           ],
     *           [
     *             2.03630075804051,
     *             44.3494542018237,
     *             256.3
     *           ]
     *         ],
     *         "type": "LineString"
     *       },
     *       "_score": 0.5757575757575758,
     *       "_type": "poi"
     *     } */
    PoiProperties: {
      /** @description Libellé du toponyme */
      toponym?: string;
      postcode?: components['schemas']['PostalCode'][];
      citycode?: components['schemas']['InseeCode'][];
      city?: string[];
      category?: components['schemas']['PoiType'];
      extrafields?: Record<string, never>;
      truegeometry?: components['schemas']['Geometry'];
      _score?: number;
      /** @enum {string} */
      _type?: 'poi';
    };
    PoiReverse: {
      /** @example Feature */
      type?: string;
      properties?: components['schemas']['PoiReverseProperties'];
      geometry?: components['schemas']['GeometryPoint'];
    };
    /** @example {
     *       "toponym": "Pont National",
     *       "postcode": [
     *         77310,
     *         91100
     *       ],
     *       "citycode": [
     *         77,
     *         77300,
     *         91,
     *         91450
     *       ],
     *       "city": [
     *         "Saint-Fargeau-Ponthierry",
     *         "Corbeil-Essonnes"
     *       ],
     *       "category": [
     *         "construction linéaire"
     *       ],
     *       "extrafields": {
     *         "names": [
     *           "pont strasbourg",
     *           "pont national"
     *         ],
     *         "cleabs": "CONSLINE0000000060494180"
     *       },
     *       "truegeometry": {
     *         "coordinates": [
     *           [
     *             2.03666899913969,
     *             44.3490469250535,
     *             257
     *           ],
     *           [
     *             2.03646952056093,
     *             44.3492684335352,
     *             256.3
     *           ],
     *           [
     *             2.03644906780383,
     *             44.3492907599887,
     *             256.3
     *           ],
     *           [
     *             2.03630075804051,
     *             44.3494542018237,
     *             256.3
     *           ]
     *         ],
     *         "type": "LineString"
     *       },
     *       "_score": 0.5757575757575758,
     *       "_type": "poi",
     *       "distance": 100
     *     } */
    PoiReverseProperties: {
      /** @description Libellé du toponyme */
      toponym?: string;
      postcode?: components['schemas']['PostalCode'][];
      citycode?: components['schemas']['InseeCode'][];
      city?: string[];
      category?: components['schemas']['PoiType'];
      extrafields?: Record<string, never>;
      truegeometry?: components['schemas']['Geometry'];
      _score?: number;
      /** @enum {string} */
      _type?: 'poi';
      distance?: number;
    };
    PoiType: string[];
    /** @description Code postal */
    PostalCode: string;
    /** @description Code INSEE */
    InseeCode: string;
    /** @example {
     *       "type": "Point",
     *       "coordinates": [
     *         2.03648539635326,
     *         44.3492508045369
     *       ]
     *     } */
    Geometry: {
      type?: components['schemas']['GeometryType'];
      coordinates?: number[];
    };
    /** @example {
     *       "type": "Point",
     *       "coordinates": [
     *         2.03648539635326,
     *         44.3492508045369
     *       ]
     *     } */
    GeometryPoint: {
      /** @enum {string} */
      type?: 'Point';
      coordinates?: number[];
    };
    /** @example {
     *       "type": "Circle",
     *       "coordinates": [
     *         2.35457222187139,
     *         48.8523027661354
     *       ],
     *       "radius": 100
     *     } */
    GeometryCircle: {
      /** @enum {string} */
      type?: 'Circle';
      coordinates?: number[];
      radius?: number;
    };
    /** @example {
     *       "type": "LineString",
     *       "coordinates": [
     *         [
     *           2.35457222187139,
     *           48.8523027661354
     *         ],
     *         [
     *           2.35463049659443,
     *           48.8523731401755
     *         ],
     *         [
     *           2.35457222187139,
     *           48.8523027661354
     *         ]
     *       ]
     *     } */
    GeometryLineString: {
      /** @enum {string} */
      type?: 'LineString';
      coordinates?: number[];
    };
    /** @example {
     *       "type": "Polygon",
     *       "coordinates": [
     *         [
     *           [
     *             2.35457222187139,
     *             48.8523027661354
     *           ],
     *           [
     *             2.35463049659443,
     *             48.8523731401755
     *           ],
     *           [
     *             2.35465580843827,
     *             48.8523650925735
     *           ],
     *           [
     *             2.35464724014948,
     *             48.8522756505323
     *           ],
     *           [
     *             2.35457222187139,
     *             48.8523027661354
     *           ]
     *         ]
     *       ]
     *     } */
    GeometryPolygon: {
      /** @enum {string} */
      type?: 'Polygon';
      coordinates?: number[];
    };
    /** @example {
     *       "type": "MultiPolygon",
     *       "coordinates": [
     *         [
     *           [
     *             [
     *               2.35457222187139,
     *               48.8523027661354
     *             ],
     *             [
     *               2.35463049659443,
     *               48.8523731401755
     *             ],
     *             [
     *               2.35465580843827,
     *               48.8523650925735
     *             ],
     *             [
     *               2.35457222187139,
     *               48.8523027661354
     *             ]
     *           ]
     *         ]
     *       ]
     *     } */
    GeometryMultiPolygon: {
      /** @enum {string} */
      type?: 'MultiPolygon';
      coordinates?: number[];
    };
    /** @enum {string} */
    GeometryType: 'Point' | 'MultiPolygon' | 'LineString';
    /**
     * @default address
     * @enum {string}
     */
    Index: 'address' | 'poi' | 'parcel';
    HouseNumberInfos: {
      date?: string;
      kind?: components['schemas']['AddressPositionKing'];
      source?: string;
    };
    AddressPositionKing: (
      | 'entrance'
      | 'building'
      | 'staircase'
      | 'unit'
      | 'parcel'
      | 'segment'
      | 'utility'
      | 'area'
      | 'postal'
      | 'unknown'
    )[];
    Project: {
      id?: string;
      /** @enum {string} */
      status?: 'idle' | 'waiting' | 'processing' | 'failed' | 'completed';
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      params?: components['schemas']['ProjectParams'];
      pipeline?: components['schemas']['Pipeline'];
      inputFile?: Record<string, never>;
      outputFile?: Record<string, never>;
      processing?: components['schemas']['GeocodeProcessing'];
      /** @description Jeton permettant d'interéagir avec le projet. N'est retourné que lors de la création. */
      token?: string;
    };
    GeocodeProcessing: {
      step?: string;
      validationProgress?: Record<string, never>;
      validationError?: string;
      geocodingProgress?: Record<string, never>;
      geocodingError?: string;
      globalError?: string;
      /** Format: date-time */
      startedAt?: string;
      /** Format: date-time */
      finishedAt?: string;
      /** Format: date-time */
      heartbeat?: string;
    };
    Pipeline: {
      geocodeOptions?: {
        /**
         * @description Opération demandée
         * @default search
         * @enum {string}
         */
        operation: 'search' | 'reverse';
        /** @description Index à utiliser pour le géocodage */
        indexes?: ('address' | 'poi' | 'parcel')[];
        /** @description Liste des colonnes du fichier CSV à utiliser pour le géocodage. Celles-ci seront concaténées pour former le critère de recherche texte.
         *
         *     Si le paramètre n'est pas fourni toutes les colonnes seront concaténées, ce qui est rarement souhaitable.
         *      */
        columns?: string[];
        /** @description Colonne contenant le type d’objet accepté pour le géocodage de la ligne (address) */
        type?: string;
        /** @description Colonne contenant le code INSEE de la commune à utiliser comme filtre (address, poi) */
        citycode?: string;
        /** @description Colonne contenant le code postal à utiliser comme filtre (address, poi) */
        postcode?: string;
        /** @description Colonne contenant la catégorie de POI à utiliser comme filtre (poi) */
        category?: string;
        /** @description Colonne contenant la longitude du point de recherche */
        lon?: string;
        /** @description Colonne contenant la latitude du point de recherche */
        lat?: string;
        /** @description Colonne contenant le code département à utiliser comme filtre (parcel) */
        departmentcode?: string;
        /** @description Colonne contenant le code commune  à utiliser comme filtre (parcel) */
        municipalitycode?: string;
        /** @description Colonne contenant l'ancien code commune à utiliser comme filtre (parcel) */
        oldmunicipalitycode?: string;
        /** @description Colonne contenant le code d'arrondissement à utiliser comme filtre (parcel) */
        districtcode?: string;
        /** @description Colonne contenant le numéro de section à utiliser comme filtre (parcel) */
        section?: string;
        /** @description Colonne contenant le numéro de feuille à utiliser comme filtre (parcel) */
        sheet?: string;
        /** @description Colonne contenant le numéro de parcelle à utiliser comme filtre (parcel) */
        number?: string;
        /** @description Liste des colonnes de type résultat à conserver dans le fichier de sortie.
         *
         *     Par défaut toutes les colonnes disponibles sont retournées.
         *      */
        result_columns?: string[];
      };
      /** @enum {string} */
      outputFormat?: 'csv' | 'geojson';
    };
    ProjectParams: {
      /** @enum {string} */
      maxInputFileSize?: '50MB' | '100MB' | '200MB' | '500MB' | '1GB';
      /** @enum {number} */
      concurrency?: 1 | 2 | 4;
    };
    /**
     * Format: binary
     * @description Fichier CSV géocodé. Les lignes d'origine sont préservées.
     *
     *     Les colonnes issues de l'objet associé lors du géocodage et pouvant être ajoutées sont :
     *     - result_label
     *     - result_score
     *     - result_type (address)
     *     - result_id
     *     - result_housenumber (address)
     *     - result_name (address)
     *     - result_street (address)
     *     - result_postcode (address, poi)
     *     - result_city (address, poi)
     *     - result_context
     *     - result_citycode (address, poi)
     *     - result_oldcitycode (address, poi)
     *     - result_oldcity (address, poi)
     *     - result_district (address, poi)
     *     - result_category (poi)
     *     - result_departmentcode (parcel)
     *     - result_municipalitycode (parcel)
     *     - result_section (parcel)
     *     - result_sheet (parcel)
     *     - result_number (parcel)
     *     - result_oldmunicipalitycode (parcel)
     *     - result_districtcode (parcel)
     *
     *     Les colonnes suivantes sont spécifiques au géocodage direct :
     *     - latitude
     *     - longitude
     *
     *     Les colonnes suivantes sont spécifiques au géocodage inversé :
     *     - result_latitude
     *     - result_longitude
     *     - result_distance
     *
     *     Les colonnes suivantes sont liées au géocodage en masse :
     *     - result_score_next : score du résultat suivant le cas échéant
     *     - result_index : index dans lequel l'objet a été trouvé
     *     - result_status (ok = trouvé, not-found = non trouvé, skipped = ligne ignorée en raison de paramètres manquants ou invalides, error = erreur du serveur lors de la recherche)
     *
     *     NB : En cas de colonnes d'origine nommées latitude ou longitude et de géocodage direct, elles seront écrasées par les valeurs calculées.
     *
     */
    GeocodeCsvResponse: string;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getCapabilities: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Getcapabilities'];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  search: {
    parameters: {
      query?: {
        /** @description chaîne décrivant la localisation à rechercher
         *
         *     Exemples de requêtes:
         *     - /search?q=73 Avenue de Paris Saint-Mandé
         *     - /search?q=cimetière Vincennes
         *     - /search?q=75056104AE0003
         *
         *     Note:
         *     L'absence de valeur est autorisée sur le type parcel pour réaliser une recherche structurée.
         *     Par exemple: /search?q=&index=parcel&departmentcode=75&municipalitycode=056&section=AV
         *      */
        q?: string;
        /** @description indique si la recherche doit être effectuée en mode auto-complétion (comportement par défaut).
         *      */
        autocomplete?: '1' | '0';
        /** @description index(es) de recherche :
         *     - <b>address</b> pour la recherche par adresse
         *     - <b>parcel</b> pour la recherche par parcelle cadastrale
         *     - <b>poi</b> pour la recherche par lieu et unité administrative
         *
         *     Il est possible de spécifier plusieurs indexes séparés par une virgule.
         *
         *     Exemples:
         *     - /search?index=parcel
         *     - /search?index=poi,address
         *      */
        index?: components['schemas']['Index'];
        /** @description Nombre maximum de résultats retournés.
         *     La valeur ne peut pas dépasser 50.
         *     Dans le cas où returntruegeometry est activé, la valeur est automatiquement ramenée à 20.
         *      */
        limit?: number;
        /** @description latitude d'un localisant pour favoriser les candidats les plus proches. */
        lat?: number;
        /** @description longitude d'un localisant pour favoriser les candidats les plus proches. */
        lon?: number;
        /** @description indique si la vraie géométrie doit être retournée */
        returntruegeometry?: boolean;
        /** @description Filtre pour les index address et poi. Il permet de filtrer les résultats par code postal. */
        postcode?: components['schemas']['PostalCode'];
        /** @description Filtre pour les index address et poi. Il permet de filtrer les résultats par code INSEE. */
        citycode?: components['schemas']['InseeCode'];
        /** @description Filtre pour l'index address. Il permet de filtrer par type de données adresse : numéro de maison, rue, commune, ... */
        type?: 'housenumber' | 'street' | 'locality' | 'municipality';
        /** @description Filtre pour les index address et poi. Il permet de filtrer par nom de commune. */
        city?: string;
        /** @description Filtre pour l'index poi. Il permet de filtrer par catégorie de poi.
         *     Les valeurs possibles sont listées dans le getCapabilities du service de géocodage.
         *      */
        category?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par code de département. */
        departmentcode?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par code de commune. */
        municipalitycode?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par code d'ancienne commune. */
        oldmunicipalitycode?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par code d'arrondissement. */
        districtcode?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par section. */
        section?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par numéro. */
        number?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par feuille. */
        sheet?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example FeatureCollection */
            type?: string;
            features?: components['schemas']['GeocodeResponse'][];
          };
        };
      };
      /** @description Parse query failed */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  reverse: {
    parameters: {
      query?: {
        /** @description Géométrie de recherche. La géométrie est réalisé par intersection géométrique. Si ce paramètre est utilisé seul, c''est que l''on souhaite une recherche sans ordonnancement des résultats (tous les objets intersectant la géométrie de recherche ont un score de 1).
         *     Si on veut ordonner les résultats, on peut alors utiliser les paramètres lon et lat pour préciser un point d''ordonnancement.
         *     Ce paramètre n''est pas obligatoire pour des raisons de rétro-compatibilité. Si searchgeom n''est pas utilisé alors les paramètres lon et lat doivent l''être et on parle de point de recherche.
         *     Lorsque la recherche est réalisée par intersection géométrique. Les types géométrique autorisés sont :
         *
         *     - Point
         *
         *     - LineString
         *
         *     - Polygon
         *
         *     - Circle
         *     Exemple de géométrie de type Circle :
         *     {
         *     &nbsp;&nbsp;&nbsp;&nbsp;"type": "Circle",
         *     &nbsp;&nbsp;&nbsp;&nbsp;"coordinates": [2.294469, 48.858244],
         *     &nbsp;&nbsp;&nbsp;&nbsp;"radius": 100
         *     }
         *     Pour l''index <b>address</b>, seules les géométries de type ''Polygon'' et ''Circle'' sont autorisées.
         *     Le plus grand côté du rectangle d’emprise de la géométrie ne doit pas excéder 1000 mètres.
         *      */
        searchgeom?: string;
        /** @description Si searchgeom est utilisé, il s'agit de la longitude du point d'ordonnancement. C'est le point à partir duquel est calculée la distance, puis le score permettant l'ordonnancement des résultats.
         *     Dans un soucis de rétro-compatibilité, si searchgeom n'est pas utilisé, il s'agit de la longitude du point de recherche. À partir de ce point, un cercle est créé pour effectuer la recherche. En plus, ce sera aussi la longitude du point d'ordonnancement.
         *      */
        lon?: number;
        /** @description Si searchgeom est utilisé, il s'agit de la latitude  du point d'ordonnancement. C'est le point à partir duquel est calculée la distance, puis le score permettant l'ordonnancement des résultats.
         *     Dans un soucis de rétro-compatibilité, si searchgeom n'est pas utilisé, il s'agit de la latitude du point de recherche. À partir de ce point, un cercle est créé pour effectuer la recherche. En plus, ce sera aussi la latitude du point d'ordonnancement.
         *      */
        lat?: number;
        /** @description index de recherche :
         *     - <b>address</b> pour la recherche par adresse
         *     - <b>parcel</b> pour la recherche par parcelle cadastrale
         *     - <b>poi</b> pour la recherche par lieu et unité administrative
         *
         *     Il est possible de spécifier plusieurs indexes séparés par une virgule.
         *
         *     Exemples:
         *     - /search?index=parcel
         *     - /search?index=poi,address
         *      */
        index?: components['schemas']['Index'];
        /** @description Nombre maximum de résultats retournés.
         *     La valeur ne peut pas dépasser 50.
         *     Dans le cas où returntruegeometry est activé, la valeur est automatiquement ramenée à 20.
         *      */
        limit?: number;
        /** @description indique si la vraie géométrie doit être retournée */
        returntruegeometry?: boolean;
        /** @description Filtre pour les index address et poi. Il permet de filtrer les résultats par code postal. */
        postcode?: components['schemas']['PostalCode'];
        /** @description Filtre pour les index address et poi. Il permet de filtrer les résultats par code INSEE. */
        citycode?: components['schemas']['InseeCode'];
        /** @description Filtre pour l'index address. Il permet de filtrer par type de données adresse : numéro de maison, rue, commune, ... */
        type?: 'housenumber' | 'street' | 'locality' | 'municipality';
        /** @description Filtre pour les index address et parcel. Il permet de filtrer par nom de commune. */
        city?: string;
        /** @description Filtre pour l'index poi. Il permet de filtrer par catégorie de poi.
         *     Les valeurs possibles sont listées dans le getCapabilities du service de géocodage.
         *      */
        category?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par code de département. */
        departmentcode?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par code de commune. */
        municipalitycode?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par code d'ancienne commune. */
        oldmunicipalitycode?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par code d'arrondissement. */
        districtcode?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par section. */
        section?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par numéro. */
        number?: string;
        /** @description Filtre pour l'index parcel. Il permet de filtrer par feuille. */
        sheet?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example FeatureCollection */
            type?: string;
            features?: components['schemas']['GeocodeReverseResponse'][];
          };
        };
      };
      /** @description Parse query failed */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  searchCsv: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description Fichier CSV contenant les lignes à géocoder
           */
          data: string;
          /** @description Liste des colonnes du fichier CSV à utiliser pour le géocodage. Celles-ci seront concaténées pour former le critère de recherche texte.
           *
           *     Si le paramètre n'est pas fourni toutes les colonnes seront concaténées, ce qui est rarement souhaitable.
           *      */
          columns?: string[];
          /** @description Liste des index à utiliser pour le géocodage (parmi address, poi, parcel) */
          indexes?: string[];
          /** @description Colonne contenant le type d’objet accepté pour le géocodage de la ligne (address) */
          type?: string;
          /** @description Colonne contenant le code INSEE de la commune à utiliser comme filtre (address, poi) */
          citycode?: string;
          /** @description Colonne contenant le code postal à utiliser comme filtre (address, poi) */
          postcode?: string;
          /** @description Colonne contenant la catégorie de POI à utiliser comme filtre (poi) */
          category?: string;
          /** @description Colonne contenant la longitude du point de recherche */
          lon?: string;
          /** @description Colonne contenant la latitude du point de recherche */
          lat?: string;
          /** @description Colonne contenant le code département à utiliser comme filtre (parcel) */
          departmentcode?: string;
          /** @description Colonne contenant le code commune  à utiliser comme filtre (parcel) */
          municipalitycode?: string;
          /** @description Colonne contenant l'ancien code commune à utiliser comme filtre (parcel) */
          oldmunicipalitycode?: string;
          /** @description Colonne contenant le code d'arrondissement à utiliser comme filtre (parcel) */
          districtcode?: string;
          /** @description Colonne contenant le numéro de section à utiliser comme filtre (parcel) */
          section?: string;
          /** @description Colonne contenant le numéro de feuille à utiliser comme filtre (parcel) */
          sheet?: string;
          /** @description Colonne contenant le numéro de parcelle à utiliser comme filtre (parcel) */
          number?: string;
          /** @description Liste des colonnes de type résultat à conserver dans le fichier CSV de sortie.
           *
           *     Par défaut toutes les colonnes disponibles sont retournées.
           *      */
          result_columns?: string[];
        };
      };
    };
    responses: {
      /** @description Géocodage réussi */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/csv': components['schemas']['GeocodeCsvResponse'];
        };
      };
      /** @description Échec du géocodage suite à une erreur dans la requête ou dans le fichier CSV */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /**
             * @description Code d'erreur (HTTP)
             * @example 400
             */
            code?: number;
            /**
             * @description Message d'erreur
             * @example Impossible de lire le fichier CSV
             */
            message?: string;
          };
        };
      };
    };
  };
  reverseCsv: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description Fichier CSV contenant les données à géocoder
           */
          data: string;
          /** @description Liste des index à utiliser pour le géocodage (parmi address, poi, parcel) */
          indexes?: string[];
          /** @description Colonne contenant le type d’objet accepté pour le géocodage de la ligne (address) */
          type?: string;
          /** @description Colonne contenant le code INSEE de la commune à utiliser comme filtre (address, poi) */
          citycode?: string;
          /** @description Colonne contenant le code postal à utiliser comme filtre (address, poi) */
          postcode?: string;
          /** @description Colonne contenant la catégorie de POI à utiliser comme filtre (poi) */
          category?: string;
          /** @description Colonne contenant la longitude du point de recherche */
          lon?: string;
          /** @description Colonne contenant la latitude du point de recherche */
          lat?: string;
          /** @description Colonne contenant le code département à utiliser comme filtre (parcel) */
          departmentcode?: string;
          /** @description Colonne contenant le code commune  à utiliser comme filtre (parcel) */
          municipalitycode?: string;
          /** @description Colonne contenant l'ancien code commune à utiliser comme filtre (parcel) */
          oldmunicipalitycode?: string;
          /** @description Colonne contenant le code d'arrondissement à utiliser comme filtre (parcel) */
          districtcode?: string;
          /** @description Colonne contenant le numéro de section à utiliser comme filtre (parcel) */
          section?: string;
          /** @description Colonne contenant le numéro de feuille à utiliser comme filtre (parcel) */
          sheet?: string;
          /** @description Colonne contenant le numéro de parcelle à utiliser comme filtre (parcel) */
          number?: string;
          /** @description Liste des colonnes de type résultat à conserver dans le fichier CSV de sortie.
           *
           *     Par défaut toutes les colonnes disponibles sont retournées.
           *      */
          result_columns?: string[];
        };
      };
    };
    responses: {
      /** @description Géocodage réussi */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/csv': components['schemas']['GeocodeCsvResponse'];
        };
      };
      /** @description Échec du géocodage suite à une erreur dans la requête ou dans le fichier CSV */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /**
             * @description Code d'erreur (HTTP)
             * @example 400
             */
            code?: number;
            /**
             * @description Message d'erreur
             * @example Impossible de lire le fichier CSV
             */
            message?: string;
          };
        };
      };
    };
  };
}
